#define WORKGROUP_SIZE 32
/**************************************************************
 *                    Header & #define
 **************************************************************/
#ifndef GLSL
#define INOUT(x) x&
#define OUT(x) x&
#define ALLOW_UNUSED [[maybe_unused]]
#else
#define INOUT(x) inout x
#define OUT(x) out x
#define ALLOW_UNUSED

#extension GL_EXT_debug_printf : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
#endif

// Every shader execution calculates the route for a single ray.
// `_ray` is that ray, it's always in world coordinates (!).
#define _ray (rayData[uint(gl_GlobalInvocationID)])
#define _rayMeta (rayMetaData[uint(gl_GlobalInvocationID)])

#include "../../Shared/Constants.h"

/**************************************************************
 *                    Structs
 **************************************************************/

// for non GLSL(CPP), the according things are mostly defined in CpuTracer.h
#ifndef GLSL
int gl_GlobalInvocationID;

ShaderArray<Ray> rayData;
ShaderArray<RayMeta> rayMetaData;
ShaderArray<Ray> outputData;
ShaderArray<Element> elements;
ShaderArray<dvec4> xyznull;
ShaderArray<int> matIdx;
ShaderArray<double> mat;

#else
struct Ray {
    dvec3 m_position;
    // Initially weight for _ray is `W_IN_COMPUTATION`.
    // See the potential values of `m_weight` in `Constants.h`.
    double m_weight;
    dvec3 m_direction;
    double m_energy;
    dvec4 m_stokes;
    double m_pathLength;
    double m_order;
    double m_lastElement;
    double m_extraParam;  // Deprecated
};

struct RayMeta {
    uint64_t ctr;
    int nextElementId;
    bool finalized;
};

#ifdef RAYX_DEBUG_MODE
struct _debug_struct {
    dmat4 _dMat;  // Can also be used as vectors or scalar
};
#endif

/**************************************************************
 *                    SHADER LAYOUT (GPU-ONLY)
 **************************************************************/

// don't use this directly. Use `_ray` instead.
layout(std140, binding = 0) buffer iobuf { Ray rayData[]; };

layout(std140, binding = 1) buffer ibufm { RayMeta rayMetaData[]; };

// std430 is required so that Element is layouted like in C++.
// see https://www.khronos.org/opengl/wiki/Interface_Block_(GLSL) for more details on layouting.
layout(std430, binding = 2) buffer qbuf { Element elements[]; };

layout(std140, binding = 3) buffer xyzbuf { dvec4 xyznull[]; };

layout(binding = 4) buffer materialIndexBuf {
    int matIdx[];  // matIdx[0..91] contains the indices of the Palik Table, whereas matIdx[92..92+91] contains the indices of the NffTable.
                   // generally, an entry of matIdx tells you the index you need to look up in the 'mat'-table below.
};

layout(binding = 5) buffer materialBuf {
    double mat[];  // contains: (Palik tables of all materials concatenated together) concatenated with (Nff tables of all materials concatenated
                   // together) use the matIdx-table to determine the relevant indices for when which table starts and stops.
};

#ifdef RAYX_DEBUG_MODE
layout(binding = 6) buffer debugBuf {
    _debug_struct d_struct[];  // contains nff table of all materials concatenated together
};
#endif

#endif

/**************************************************************
 *                    PushConstants
 **************************************************************/
#ifndef GLSL
PushConstants_t pushConstants;
#else
layout(push_constant) uniform constants {
    double rayIdStart;
    double numRays;
    double randomSeed;
    double maxSnapshots;  // FIXME(OS) : Only used by CPU
    int i_bounce;
}
pushConstants;
#endif

/**************************************************************
 *                    Functions && vars
 **************************************************************/

// take a snapshot and store it in the next free spot in outputData.
// `r` will typically be _ray, or some related ray.
void takeSnapshot(Ray r, double w) {
    if (_rayMeta.finalized) {
        return;
    }
    _ray = r;
    _ray.m_weight = w;
    return;
}

// like `takeSnapshot` above, but it will prevent taking more snapshots after this.
// Is used for snapshots terminating the path of the ray.
void takeFinalSnapshot(Ray r, double w) {
    takeSnapshot(r, w);
    _rayMeta.finalized = true;
}

// throws an error, and termiantes the program
#ifdef GLSL
#define throw(string) takeFinalSnapshot(_ray, W_FATAL_ERROR)
#else
#define throw(string) RAYX_ERR << string
#endif

/**************************************************************
 *                    Shader INCLUDEs
 **************************************************************/

// Order in #include is IMPROTANT, do not change.
// clang-format off
#include "approx.comp"
#include "complex.comp"
#include "random.comp"
#include "utils.comp"
#include "collision.comp"
#include "behave.comp"
// clang-format on

/**************************************************************
 *                    MAIN
 **************************************************************/
void main() {
    _ray.m_weight = W_UNINIT;

    if (_rayMeta.finalized) {
        return;  // RETURN FINALIZED
    }
    // Transform Ray into world coordinates
    if (_rayMeta.nextElementId != -1) {
        _ray = rayMatrixMult(_ray, elements[_rayMeta.nextElementId].m_outTrans);
    }

    // Make final check on ray
    // placeholder, info should later be transfered to shader
    Collision col = findCollision();
    if (col.found) {
        takeFinalSnapshot(_ray, W_NOT_ENOUGH_BOUNCES);
        _rayMeta.nextElementId = col.elementIndex;
    } else {
        takeFinalSnapshot(_ray, W_FLY_OFF);
        _rayMeta.nextElementId = -1;
    }
}