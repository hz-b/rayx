// converts energy in eV to wavelength in nm
float RAYX_API hvlam(float x) {
    if (x == 0) {
        return 0.0;
    }
    return inm2eV / x;
}

// originally we calculcated 1/0, which might be UB (https://stackoverflow.com/questions/5802351/what-happens-when-you-divide-by-0-in-a-shader).
// `return 1e+308 * 2.0;` correctly returns positive infinity on my machine (Rudi), but we have no guarantee that it always does.
// So instead we return a sufficiently large number to be used like positive infinity.
float infinity() { return 1e+308; }

// multiplies position and direction of ray r with transformation matrix m
// r = dot(m, r)
Ray RAYX_API rayMatrixMult(Ray r, const mat4 m) {
    r.m_position = vec3(m * vec4(r.m_position, 1));
    r.m_direction = vec3(m * vec4(r.m_direction, 0));
    return r;
}

Ray rotationAroundX(Ray r, float sin_psi, float cos_psi) {
    mat4 rotation_matrix = mat4(1, 0, 0, 0, 0, cos_psi, -sin_psi, 0, 0, sin_psi, cos_psi, 0, 0, 0, 0, 1);
    return rayMatrixMult(r, rotation_matrix);
}

/**
 * uses given transformation matrix to transform ray position and direction into
 * Object coordinates also takes misalignment of the object into account
 * @param r				input ray in Ray-coordinates
 * @param misalignment	4x4 homogeneous matrix that contains the misalignment of
 * the element (dx, dy, dz, dphi, dpsi, dchi)
 * @param inTrans		4x4 homogeneous matrix that contains the transformation
 * of ray-coordinates to object coordinates (distance to previous element,
 * grazing incidence angle, azimuthal angle)
 *
 * output: nothing. changes r in place
 */
void inTransformation(RAYX_INOUT(Ray) r, const mat4 misalignment, const mat4 inTrans) {
    r.m_position = vec3(misalignment * (inTrans * vec4(r.m_position, 1)));
    r.m_direction = vec3(misalignment * (inTrans * vec4(r.m_direction, 0)));
}

/**
 * uses given transformation matrix to transform ray position and direction back
 * into Ray coordinates also takes misalignment of the object into account. Note
 * that the order of the transformations is reversed and we use the inverse of
 * the misalignment matrix
 * @param r				input ray in Ray-coordinates
 * @param invMisalignment	4x4 homogeneous matrix that contains the
 * misalignment of the element (dx, dy, dz, dphi, dpsi, dchi)
 * @param outTrans		3x3 homogeneous matrix (in 4x4 matrix for
 * standardization) that contains the transformation of object coordinates to
 * ray-coordinates (rotations only: grazing exit angle, neg. azimuthal angle)
 *
 * output: nothing. changes r in place
 */
void outTransformation(RAYX_INOUT(Ray) r, const mat4 invMisalignment, const mat4 outTrans) {
    r.m_position = vec3(outTrans * (invMisalignment * vec4(r.m_position, 1)));
    r.m_direction = vec3(outTrans * (invMisalignment * vec4(r.m_direction, 0)));
}

// only for testing purposes. generally, each angle in the shader is in rad!!
float deg2rad(float degree) {
    // float PI = 3.141592653589793238462643383279502884197169399;//3 7 5 1 0 5
    // 8 2 0 9 7 4 9 4 4 5 9
    return PI * degree / 180;
}

// returns forial of a (from RAYLIB.for) (a!)
float RAYX_API fact(int a) {
    if (a < 0) {
        return a;
    }
    float f = 1;
    for (int i = 2; i <= a; i++) {
        f *= i;
    }
    return f;
}

/**
calculates direction cosini from angles phi,psi given in rad
@params r		ray whose direction vector is recalculated (inout)
        phi		horizontal angle in x-z-plane (pos.rotation, counterclockwise)
        phi		vertical angle in y-z-plane (pos.rotation, counterclockwise)
*/
void RAYX_API cosini(RAYX_INOUT(Ray) r, float phi, float psi) {
    float cos_psi = cos(float(psi));
    float cos_phi = cos(float(phi));
    float sin_psi = sin(float(psi));
    float sin_phi = sin(float(phi));

    r.m_direction.x = cos_psi * sin_phi;
    r.m_direction.y = -sin_psi;
    r.m_direction.z = cos_psi * cos_phi;
}

// checks whether the point (x1, x2) is within the cutout.
bool inCutout(Cutout cutout, float x1, float x2) {
    if (cutout.m_type == CTYPE_UNLIMITED) {
        return true;
    } else if (cutout.m_type == CTYPE_RECT) {
        RectCutout rect = deserializeRect(cutout);
        float x1_min = -rect.m_size_x1 / 2.0;
        float x1_max = rect.m_size_x1 / 2.0;
        float x2_min = -rect.m_size_x2 / 2.0;
        float x2_max = rect.m_size_x2 / 2.0;

        return !(x1 <= x1_min || x1 >= x1_max || x2 <= x2_min || x2 >= x2_max);
    } else if (cutout.m_type == CTYPE_TRAPEZOID) {
        TrapezoidCutout t = deserializeTrapezoid(cutout);

        // Check point is within the trapezoid
        vec2 P = vec2(x1, x2);

        // A, B, C, D are the four points on the trapezoid.
        //
        //    A--B    //
        //   /    \   //
        //  C------D  //
        vec2 A = vec2(-t.m_sizeA_x1 / 2.0, -t.m_size_x2 / 2.0);
        vec2 B = vec2(t.m_sizeA_x1 / 2.0, -t.m_size_x2 / 2.0);
        vec2 C = vec2(t.m_sizeB_x1 / 2.0, t.m_size_x2 / 2.0);
        vec2 D = vec2(-t.m_sizeB_x1 / 2.0, t.m_size_x2 / 2.0);

        vec2 PmA = P - A;
        vec2 BmA = B - A;
        vec2 PmD = P - D;
        vec2 CmD = C - D;
        vec2 DmA = D - A;
        vec2 PmB = P - B;
        vec2 CmB = C - B;

        float l1 = (PmA.x * BmA.y - PmA.y * BmA.x) * (PmD.x * CmD.y - PmD.y * CmD.x);
        float l2 = (PmA.x * DmA.y - PmA.y * DmA.x) * (PmB.x * CmB.y - PmB.y * CmB.x);
        return l1 < 0 && l2 < 0;
    } else if (cutout.m_type == CTYPE_ELLIPTICAL) {
        EllipticalCutout ell = deserializeElliptical(cutout);

        float radius_x1 = ell.m_diameter_x1 / 2.0;
        float radius_x2 = ell.m_diameter_x2 / 2.0;

        float val1 = x1 / radius_x1;
        float val2 = x2 / radius_x2;

        float rd2 = val1 * val1 + val2 * val2;
        return rd2 <= 1.0;
    } else {
        throw("invalid cutout type in inCutout!");
        return false;
    }
}

// returns vec2(atomic mass, density) extracted from materials.xmacro
vec2 RAYX_API getAtomicMassAndRho(int material) {
    switch (material) {
#define X(e, z, a, rho) \
    case z:             \
        return vec2(a, rho);
#include "../../Material/materials.xmacro"
#undef X
    }
    throw("invalid material in getAtomicMassAndRho");
    return vec2(0.0, 0.0);
}

#include "../../Shared/NffPalik.h"

int RAYX_API getPalikEntryCount(int material) {
    int m = material - 1;  // in [0, 91]
    // this counts how many doubles are in between the materials index, and the
    // next index in the table. division by 3, because each entry has 3 members
    // currently: energy, n, k, padding.
    return (matIdx[m + 1] - matIdx[m]) / 3;
}

int RAYX_API getNffEntryCount(int material) {
    int m = material - 1;  // in [0, 91]
    // the offset of 92 (== number of materials), skips the palik table and
    // reaches into the nff table. the rest of the logic is as above.
    return (matIdx[92 + m + 1] - matIdx[92 + m]) / 3;
}

PalikEntry RAYX_API getPalikEntry(int index, int material) {
    int m = material - 1;  // in [0, 91]
    // matIdx[m] is the start of the Palik table of material m.
    // 3*index skips 'index'-many entries.
    int i = matIdx[m] + 3 * index;

    PalikEntry e;
    e.m_energy = mat[i];
    e.m_n = mat[i + 1];
    e.m_k = mat[i + 2];

    return e;
}

NffEntry RAYX_API getNffEntry(int index, int material) {
    int m = material - 1;  // in [0, 91]
    // matIdx[92+m] is the start of the Nff table of material m.
    // 3*index skips 'index'-many entries.
    int i = matIdx[92 + m] + 3 * index;

    NffEntry e;
    e.m_energy = mat[i];
    e.m_f1 = mat[i + 1];
    e.m_f2 = mat[i + 2];

    return e;
}

// returns vec2 to represent a complex number
vec2 RAYX_API getRefractiveIndex(float energy, int material) {
    if (material == -1) {  // vacuum
        return vec2(1., 0.);
    }

    // out of range check
    if (material < 1 || material > 92) {
        throw("getRefractiveIndex material out of range!");
        return vec2(-1.0, -1.0);
    }

    // try to get refractive index using Palik table
    if (getPalikEntryCount(material) > 0) {           // don't try binary search if there are 0 entries!
        int low = 0;                                  // <= energy
        int high = getPalikEntryCount(material) - 1;  // >= energy

        PalikEntry low_entry = getPalikEntry(low, material);
        PalikEntry high_entry = getPalikEntry(high, material);

        if (low_entry.m_energy <= energy && energy <= high_entry.m_energy) {  // if 'energy' is in range of tha PalikTable
            // binary search
            while (high - low > 1) {
                int center = (low + high) / 2;
                PalikEntry center_entry = getPalikEntry(center, material);
                if (energy < center_entry.m_energy) {
                    high = center;
                } else {
                    low = center;
                }
            }

            PalikEntry entry = getPalikEntry(low, material);
            return vec2(entry.m_n, entry.m_k);
        }
    }

    // get refractive index with Nff table
    if (getNffEntryCount(material) > 0) {           // don't try binary search if there are 0 entries!
        int low = 0;                                // <= energy
        int high = getNffEntryCount(material) - 1;  // >= energy

        // binary search
        while (high - low > 1) {
            int center = (low + high) / 2;
            NffEntry center_entry = getNffEntry(center, material);
            if (energy < center_entry.m_energy) {
                high = center;
            } else {
                low = center;
            }
        }

        vec2 massAndRho = getAtomicMassAndRho(material);
        float mass = massAndRho.x;
        float rho = massAndRho.y;

        NffEntry entry = getNffEntry(low, material);
        float e = entry.m_energy;
        float n = 1 - (415.252 * rho * entry.m_f1) / (e * e * mass);
        float k = (415.252 * rho * entry.m_f2) / (e * e * mass);

        return vec2(n, k);
    }

    throw("getRefractiveIndex: no matching entry found!");
    return vec2(-1.0, -1.0);
}

// returns angle between ray direction and surface normal at intersection point
float RAYX_API getIncidenceAngle(Ray r, vec4 normal) {
    normal = normalize(normal);
    float ar = dot(vec3(normal), r.m_direction);
    // cut to interval [-1,1]
    if (ar < -1.0)
        ar = -1.0;
    else if (ar > 1.0)
        ar = 1.0;

    float theta = PI - acos(float(ar));
    int gt = int(theta > PI / 2);
    // theta in [0, pi]
    theta = gt * (PI - theta) + (1 - gt) * theta;
    return theta;
}

/** calculates cosinus of transmittance angle with snell's law
 * cosinus is needed in fresnel formula
 * sin(incidence_angle)² = 1 - cos(incidence_angle)²
 * ratio² = (cn1 / cn2)²
 * sin(transmittance_angle)² = (cn1 / cn2)² * sin(incidence_angle)²
 * cos(transmittance_angle) = sqrt( 1 - sin(transmittance_angle)²)
 *
 * @param cos_incidence			cosinus of complex incidence angle
 * @param cn1					complex refractive index of material from which
 * the ray is coming
 * @param cn2					complex refractive index of material into which
 * the ray is going
 * @return cos_transmittance 	cosinus of complex transmittance angle
 */
vec2 RAYX_API snell(vec2 cos_incidence, vec2 cn1, vec2 cn2) {
    /*vec2 sin_incidence = cx_sqrt( cx_sub(vec2(1.0,0.0),
    cx_mul(cos_incidence, cos_incidence)) ); vec2 refractive_ratio =
    cx_div(cn1, cn2); vec2 sin_transmittance = cx_mul(sin_incidence,
    refractive_ratio); vec2 cos_transmittance = cx_sqrt( cx_sub(vec2(1.0,0.0),
    cx_mul(sin_transmittance, sin_transmittance))); return cos_transmittance;*/
    vec2 sin_incidence_square = cx_sub(vec2(1.0, 0.0), cx_mul(cos_incidence, cos_incidence));  // 1 - cos(inc)**2
    vec2 refractive_ratio = cx_div(cn1, cn2);                                                  // cn1 / cn2
    vec2 ratio_square = cx_mul(refractive_ratio, refractive_ratio);
    vec2 sin_transmittance_square = cx_mul(sin_incidence_square,
                                           ratio_square);  // sin(tr)**2 = sin(inc)**2 * (cn1/cn2)**2
    vec2 cos_transmittance = cx_sqrt(cx_sub(vec2(1.0, 0.0),
                                            sin_transmittance_square));  // cos = sqrt( 1 - ratio**2*sin(tr)**2 )
    return cos_transmittance;
}

/** calculates complex s- and p-polarization with fresnel formulas
 * @param cn1					complex refractive index of material from which
 * the ray is coming
 * @param cn2					complex refractive index of material into which
 * the ray is going
 * @param cos_incidence			cosinus of complex incidence angle
 * @param cos_transmittance 	cosinus of complex transmittance angle
 * @return complex_S			complex s-polarization
 * @return complex_P			complex p-polarization
 *
 */
void RAYX_API fresnel(vec2 cn1, vec2 cn2, vec2 cos_incidence, vec2 cos_transmittance, RAYX_INOUT(vec2) complex_S, RAYX_INOUT(vec2) complex_P) {
    vec2 mat1_incidence = cx_mul(cn1, cos_incidence);  // material one (incoming side)
    vec2 mat1_transmittance = cx_mul(cn1, cos_transmittance);
    vec2 mat2_incidence = cx_mul(cn2, cos_incidence);  // material two (into which the ray goes)
    vec2 mat2_transmittance = cx_mul(cn2, cos_transmittance);

    complex_S = cx_div(cx_sub(mat1_incidence, mat2_transmittance), cx_add(mat1_incidence, mat2_transmittance));
    complex_P = -cx_div(cx_sub(mat1_transmittance, mat2_incidence), cx_add(mat1_transmittance, mat2_incidence));
    return;
}

/** computes complex s and p polarization over all layers with fresnel and
 * snell's law
 * @param energy 				energy of ray
 * @param incidence_angle		normal incidence angle
 * @param material				material the photon collides with
 * @return complex_S			complex s-polarization
 * @return complex_P			complex p-polarization
 */
void RAYX_API reflectance(float energy, float incidence_angle, RAYX_INOUT(vec2) complex_S, RAYX_INOUT(vec2) complex_P, int material) {
    vec2 cos_incidence = vec2(cos(float(incidence_angle)),
                              0.0);  // complex number, initialization only for first layer, the
                                     // others are then derived from this with snell's law

    const int vacuum_material = -1;

    // todo number of layers: loop over layers from top to bottom, transmittance
    // angle for each layer, so far only one layer (substrate?) store cosinuses
    // in array, bc needed in later loop for fresnel (or maybe only one loop is
    // enough?) todo refractive indices of materials in extra buffer?
    vec2 cn1 = getRefractiveIndex(energy, vacuum_material);
    vec2 cn2 = getRefractiveIndex(energy, material);
    vec2 cos_transmittance = snell(cos_incidence, cn1, cn2);

    // todo again iterate over layers but from bottom to top, update s and p
    // polarization in each iteration:
    fresnel(cn2, cn1, cos_transmittance, cos_incidence, complex_S, complex_P);
    // todo roughness (uses wavelength/energy)
    // todo other calculations for layers that are not substrate (which is the
    // first layer)
    return;
}
/**
 * computes complex number a + i*b in euler form:
 * euler = r * e^(i * phi) where r = sqrt(a**2 + b**2) = radius and phi =
 * atan2(a,b) = (absolute) phase
 */
vec2 RAYX_API cartesian_to_euler(vec2 complex) {
    float r = dot(complex,
                  complex);  // r = sqrt(a**2 + b**2), why not take sqrt in fortran
                             // code?, maybe better bc square root looses precision
    vec2 euler;
    if (r < 0 || r > 1) {
        euler = vec2(infinity(), infinity());
        return euler;
    }
    euler = vec2(r, r8_atan2(complex.y, complex.x));  // phi in rad
    return euler;
}

/** computes the difference in the phases of 2 complex number written in euler
 * form: r * e^(i * phi)
 * @param euler1 		first complex number // s
 * @param euler2		second complex number // p
 * @return delta = phi1 - phi2, in [-pi/2, pi/2] degrees
 */
float phase_difference(vec2 euler1, vec2 euler2) {
    float delta = euler2.y - euler1.y;  // p - s
    delta = delta - int(delta > 180) * 360.0 + int(delta < -180) * 360.0;
    return delta;
}

/** efficiency calculation
 * uses complex numbers for s- and p-polarisation:
 * complex_S = a + i*b as vec2.
 * in euler form: complex_S = r * e^(i * phi) where r = sqrt(a**2 + b**2) =
 * radius and phi = atan2(a,b) = (absolute) phase
 * @param real_S				inout, s-polarization (senkrecht), radius of
 * complex number
 * @param real_P				inout, p-polarization (parallel), radius of
 * complex number
 * @param delta					phase difference between angles of complex
 * numbers complex_S, complex_P
 * @param incidence_angle		normal incidence angle
 * @param material				material the photon collides with
 * @param others
 */
void efficiency(Ray r, RAYX_OUT(float) real_S, RAYX_OUT(float) real_P, RAYX_OUT(float) delta, float incidence_angle, int material) {
    vec2 complex_S, complex_P;
    reflectance(r.m_energy, incidence_angle, complex_S, complex_P, material);

    vec2 euler_P = cartesian_to_euler(complex_P);
    vec2 euler_S = cartesian_to_euler(complex_S);

    delta = phase_difference(euler_S, euler_P);
    real_S = euler_S.x;
    real_P = euler_P.x;
}

/** creates a Müller matrix (see p. 32 of Schäfers, 2007)
 * @param R_s
 * @param R_p
 * @param delta
 *
 */
mat4 muller_matrix(float R_s, float R_p, float delta) {
    float c = cos(float(delta));
    float s = sin(float(delta));
    return mat4((R_s + R_p) / 2.0, (R_p - R_s) / 2.0, 0.0, 0.0, (R_p - R_s) / 2.0, (R_s + R_p) / 2.0, 0.0, 0.0, 0.0, 0.0, R_s * R_p * c,
                R_s * R_p * s, 0.0, 0.0, -R_s * R_p * s, R_s * R_p * c);
}

/** returns updated stokes vector
 * @param r			ray
 * @param real_S	real part of the complex s-polarization
 * @param real_P	real part of the complex p-polarization
 * @param delta		phase difference between complex s and p polarization
 * @param azimuthal	angle of rotation of element in xy plane (chi + dchi
 * (misalignment))
 * updates stokes vector of ray
 * @returns `true`, if ray should be absorbed
 */
bool update_stokes(RAYX_INOUT(Ray) r, float real_S, float real_P, float delta, float azimuthal, RAYX_INOUT(uint64_t) ctr) {
    vec4 stokes_old = r.m_stokes;
    float c_chi = cos(float(azimuthal));
    float s_chi = sin(float(azimuthal));
    mat4 rot = mat4(1, 0, 0, 0, 0, c_chi, -s_chi, 0, 0, s_chi, c_chi, 0, 0, 0, 0, 1);
    mat4 inv_rot = transpose(rot);

    vec4 stokes_new = muller_matrix(real_S, real_P, delta) * rot * stokes_old;
    ;
    r.m_stokes = inv_rot * stokes_new;

    float rn = squaresDoubleRNG(ctr);
    // throw ray away with certain probability
    return (r.m_stokes.x / stokes_old.x) - rn <= 0;
}

/**
turn the normal vector through x_rad and z_rad
@params:  	normal: the normal vector
            x_rad: angle in rad for x-axis
            z_rad: angle in rad for z-axis
returns modified normal vector
*/
vec4 RAYX_API normal_cartesian(vec4 normal, float x_rad, float z_rad) {
    float FX = normal[0];
    float FY = normal[1];
    float FZ = normal[2];

    float cosx = cos(float(x_rad));
    float sinx = sin(float(x_rad));
    float cosz = cos(float(z_rad));
    float sinz = sin(float(z_rad));

    // put in matrix mult?
    float FY2 = FY * cosz + FZ * sinz;
    normal[0] = FX * cosx + FY2 * sinx;
    normal[1] = FY2 * cosx - FX * sinx;
    normal[2] = FZ * cosz - FY * sinz;

    return normal;
}

/**
turn the normal vector through x_rad and z_rad
@params:  	normal: the normal vector
            x_rad: angle in rad for x-axis
            z_rad: angle in rad for z-axis
returns modified normal vector
*/
vec4 RAYX_API normal_cylindrical(vec4 normal, float x_rad, float z_rad) {
    float normFXFY = sqrt(normal[0] * normal[0] + normal[1] * normal[1]);
    float arcTanFXFY = r8_atan2(normal[1], normal[0]);
    float sinz = sin(float(z_rad));
    float cosz = cos(float(z_rad));

    normal[0] = cos(float(x_rad + arcTanFXFY)) * (normFXFY * cosz + normal[2] * sinz);
    normal[1] = sin(float(x_rad + arcTanFXFY)) * (normFXFY * cosz + normal[2] * sinz);
    normal[2] = normal[2] * cosz - normFXFY * sinz;

    return normal;
}

/**
adds slope error to the normal
@params:
    normal: normal vector
    slopeX: sigma-slope error in x-y plane (chi) (RMS) in arcsec
    slopeZ: sigma-slope error in y-z plane (psi) (RMS) in arcsec
    O_type: cartesian or cylindrical type of slope error (0=cartesian,
1=cylindrical) (1 only for ellipsis relevant) returns new normal if there is a
slope error in either x or z direction or the unmodified normal otherwise.
*/
vec4 tanger(vec4 normal, float slopeX, float slopeZ, int O_type, RAYX_INOUT(uint64_t) ctr) {
    // only calculate the random number if at least one slope error is not 0,
    // since the calculation is costly (sin, cos, log involved)
    if (slopeX != 0 || slopeZ != 0) {
        float random_values[2] = {squaresNormalRNG(ctr, 0, slopeX), squaresNormalRNG(ctr, 0, slopeZ)};

        /*float x = random_values[0] * slopeX; // to get normal distribution
        from std.-norm. multiply by sigma (=slopeX) -> mu + x * sigma but mu=0
        here float z = random_values[1] * slopeZ;*/

        float x_rad = deg2rad(random_values[0] / 3600.0);
        float z_rad = deg2rad(random_values[1] / 3600.0);

        if (O_type == 0) {  // default
            normal = normal_cartesian(normal, x_rad, z_rad);
        } else if (O_type == 1) {
            normal = normal_cylindrical(normal, x_rad, z_rad);
        }
    }

    return normal;
}

/**
calculates DX and DZ (line spacing in x and z direction) at a given point for a
given direction on the grating
@params: lots
@returns: (inplace) DX, DZ
*/
void RAYX_API RZPLineDensity(Ray r, vec4 normal, RZPBehaviour b, RAYX_INOUT(float) DX, RAYX_INOUT(float) DZ) {
    int IMAGE_TYPE = int(b.m_imageType);
    int RZP_TYPE = int(b.m_rzpType);
    float risag = b.m_designSagittalEntranceArmLength;
    float rosag = b.m_designSagittalExitArmLength;
    float rimer = b.m_designMeridionalEntranceArmLength;
    float romer = b.m_designMeridionalExitArmLength;
    float alpha = b.m_designAlphaAngle;
    float beta = b.m_designBetaAngle;
    float WL = 1e-06 * b.m_designWavelength;  // source energy/design energy
    float Ord = b.m_orderOfDiffraction;

    float FX = normal.x;
    float FY = normal.y;
    float FZ = normal.z;
    float X = r.m_position.x;
    float Y = r.m_position.y;
    float Z = r.m_position.z;

    if (RZP_TYPE == 1)  // meridional (wie VLS grating)
        X = 0;

    // avoid calculating the same sinus/cosinus multiple times (costly)
    float s_beta = sin(float(beta));
    float c_beta = cos(float(beta));
    float s_alpha = sin(float(alpha));
    float c_alpha = cos(float(alpha));

    /*
    if (DERIVATION_METHOD == 1) {
        DX = getLineDensity1d(ptr_dx,x,z);
        DZ = getLineDensity1d(ptr_dz,x,z);
        return;
    }
    */
    float xi = 0;
    float yi = 0;
    float zi = 0;
    float xm = 0;
    float ym = 0;
    float zm = 0;

    if (IMAGE_TYPE == IT_POINT2POINT) {
        if (FX == 0 && FZ == 0) {  // plane
            zi = -(risag * c_alpha + Z);
            xi = X;
            yi = risag * s_alpha;
            zm = rosag * c_beta - Z;
            xm = X;
            ym = rosag * s_beta;
        } else {  // more general case, can be reduced to the plane with normal
                  // = (0,1,0) and y = 0
            zi = FX * FZ * X - (FX * FX + FY * FY) * (Z + risag * c_alpha) + FY * FZ * (Y - risag * s_alpha);
            xi = (FY * X - FX * Y + FX * risag * s_alpha);
            yi = -(FX * X) - FY * Y - FZ * Z - FZ * risag * c_alpha + FY * risag * s_alpha;
            zm = FX * FZ * X + (FX * FX + FY * FY) * (-Z + rosag * c_beta) + FY * FZ * (Y - rosag * s_beta);
            xm = (FY * X - FX * Y + FX * rosag * s_beta);
            ym = -(FX * X) - FY * Y - FZ * Z + FZ * rosag * c_beta + FY * rosag * s_beta;
        }
    } else if (IMAGE_TYPE == IT_ASTIGMATIC2ASTIGMATIC) {
        float s_rim = sign(rimer);
        float s_rom = sign(romer);
        float c_2alpha = cos(float(2 * alpha));
        float c_2beta = cos(float(2 * beta));
        if (FX == 0 && FZ == 0) {  //   !plane

            zi = s_rim * (rimer * c_alpha + Z);
            xi = (s_rim * X * (c_alpha * Z - 2 * s_alpha * s_alpha * rimer + s_alpha * Y + rimer)) /
                 (c_alpha * Z - 2 * s_alpha * s_alpha * risag + s_alpha * Y + risag);
            yi = s_rim * (-rimer * s_alpha + Y);
            zm = s_rom * (romer * c_beta - Z);
            xm = (s_rom * X * (-c_beta * Z - 2 * s_beta * s_beta * romer + s_beta * Y + romer)) /
                 (c_beta * Z + 2 * s_beta * s_beta * rosag - s_beta * Y - rosag);
            ym = s_rom * (romer * s_beta - Y);
        } else {
            float denominator = Z * c_alpha + risag * c_2alpha + Y * s_alpha;
            float nominator = X * (Z * c_alpha + rimer * c_2alpha + Y * s_alpha);
            zi = s_rim * ((FX * FX + FY * FY) * (Z + rimer * c_alpha) - FY * FZ * (Y - rimer * s_alpha) - (FX * FZ * nominator) / denominator);
            xi = s_rim * (-(FX * Y) + FX * rimer * s_alpha + (FY * nominator) / denominator);
            yi = s_rim * (FZ * (Z + rimer * c_alpha) + FY * (Y - rimer * s_alpha) + (FX * nominator) / denominator);

            denominator = (-(Z * c_beta) + rosag * c_2beta + Y * s_beta);
            nominator = X * (-(Z * c_beta) + romer * c_2beta + Y * s_beta);
            zm = s_rom * ((FX * FX + FY * FY) * (-Z + romer * c_beta) + FY * FZ * (Y - romer * s_beta) + (FX * FZ * nominator) / denominator);
            xm = s_rom * (FX * (Y - romer * s_beta) - (FY * nominator) / denominator);
            ym = s_rom * (FZ * (-Z + romer * c_beta) + FY * (-Y + romer * s_beta) - (FX * nominator) / denominator);
        }
        float ris = sqrt(zi * zi + xi * xi + yi * yi);
        float rms = sqrt(zm * zm + xm * xm + ym * ym);

        float ai = zi / ris;
        float bi = -xi / ris;
        float am = -zm / rms;
        float bm = xm / rms;

        // float ci = yi/ris; // for what?
        // float cm = -ym/rms;

        DZ = (ai + am) / (WL * Ord);
        DX = (-bi - bm) / (WL * Ord);

        return;
    } else if (IMAGE_TYPE == IT_POINT2HORIZONTAL_LINE) {
        // TODO don't use magic constants

        if (FX == 0.0 && FZ == 0.0) {  // plane
            zi = -(risag * c_alpha + Z);
            xi = X;
            yi = risag * s_alpha;
            zm = rosag * c_beta - Z;
            xm = 0;
            ym = rosag * s_beta;
        } else {
            zi = FX * FZ * X - (FX * FX + FY * FY) * (Z + risag * c_alpha) + FY * FZ * (Y - risag * s_alpha);
            xi = FY * X - FX * Y + FX * risag * s_alpha;
            yi = -(FX * X) - FY * Y - FZ * Z - FZ * risag * c_alpha + FY * risag * s_alpha;
            zm = (FX * FX + FY * FY) * (-Z + rosag * c_beta) + FY * FZ * (Y - rosag * s_beta);
            xm = FX * (-Y + rosag * s_beta);
            ym = -(FY * Y) - FZ * Z + FZ * rosag * c_beta + FY * rosag * s_beta;
        }
    } else if (IMAGE_TYPE == IT_POINT2HORIZONTAL_DIVERGENT_LINE) {
        if (FX == 0.0 && FZ == 0.0) {
            zi = -(risag * c_alpha + Z);
            xi = X;
            yi = risag * s_alpha;
            zm = rosag * c_beta - Z;
            xm = X / zi * zm;  // not anymore negative as zi is negative!g
            ym = rosag * s_beta;
        } else {
            zi = FX * FZ * X - (FX * FX + FY * FY) * (Z + risag * c_alpha) + FY * FZ * (Y - risag * s_alpha);
            xi = FY * X - FX * Y + FX * risag * s_alpha;
            yi = -(FX * X) - FY * Y - FZ * Z - FZ * risag * c_alpha + FY * risag * s_alpha;
            zm = (FX * FZ * X * (Z - rosag * c_beta)) / (Z + risag * c_alpha) + (FX * FX + FY * FY) * (-Z + rosag * c_beta) +
                 FY * FZ * (Y - rosag * s_beta);
            xm = (FY * X * (Z - rosag * c_beta)) / (Z + risag * c_alpha) + FX * (-Y + rosag * s_beta);
            ym = -((FX * X * (Z - rosag * c_beta)) / (Z + risag * c_alpha)) + FZ * (-Z + rosag * c_beta) + FY * (-Y + rosag * s_beta);
        }
    } else {
        throw("unsupported ImageType!");
    }

    float ris = sqrt(zi * zi + xi * xi + yi * yi);
    float rms = sqrt(zm * zm + xm * xm + ym * ym);

    float ai = xi / ris;
    float am = xm / rms;
    float bi = zi / ris;
    float bm = zm / rms;

    DX = (ai + am) / (WL * Ord);
    DZ = (-bi - bm) / (WL * Ord);

    return;
}

/**
calculates refracted ray
@params: 	r: ray
            normal: normal at intersection point of ray and element
            az: line spacing in z direction
            ax: line spacing in x direction
@returns: refracted ray (position unchanged, direction changed), weight = ETYPE_BEYOND_HORIZON if
"ray beyond horizon"
*/
Ray refrac2D(Ray r, vec4 normal, float az, float ax) {
    float eps1 = -atan(float(normal.x / normal.y));
    float del1 = asin(float(normal.z));

    float cos_d = cos(float(-del1));
    float sin_d = sin(float(-del1));
    float cos_e = cos(float(-eps1));
    float sin_e = sin(float(-eps1));
    mat3 rot = mat3(cos_e, cos_d * sin_e, sin_d * sin_e, -sin_e, cos_d * cos_e, sin_d * cos_e, 0, -sin_d, cos_d);
    mat3 inv_rot = mat3(cos_e, -sin_e, 0, cos_d * sin_e, cos_d * cos_e, -sin_d, sin_d * sin_e, sin_d * cos_e, cos_d);
    r.m_direction = rot * r.m_direction;

    float x1 = r.m_direction.x - ax;
    float z1 = r.m_direction.z - az;
    float y1 = 1 - x1 * x1 - z1 * z1;

    if (y1 > 0) {
        y1 = sqrt(y1);

        r.m_direction.x = x1;
        r.m_direction.y = y1;
        r.m_direction.z = z1;
        r.m_direction = inv_rot * r.m_direction;
    } else {  // beyond horizon - when divergence too large
        recordFinalEvent(r, ETYPE_BEYOND_HORIZON);
    }
    return r;
}

// refraction function used for gratings
Ray refrac(Ray r, vec4 normal, float linedensity) {
    float xy = normal[0] / normal[1];
    float zy = normal[2] / normal[1];
    float sqq = sqrt(1 + zy * zy + xy * xy);
    float an_x = xy / sqq;
    float an_y = -1.0 / sqq;
    float an_z = zy / sqq;

    float eps1 = atan(float(an_x / an_y));  //-atan(an_x/an_z) around z, chi
    float del1 = asin(float(an_z));         // sign(an_z) * r8_atan(sqrt( (an_z*an_z) / (1-an_z*an_z) )); //
                                            // -asin(an_z); // -asin around x, psi
    float cos_d = cos(float(del1));
    float a1 = linedensity * cos_d;
    float sin_d = sin(float(-del1));
    float cos_e = cos(float(-eps1));
    float sin_e = sin(float(-eps1));
    mat4 rot = mat4(cos_e, cos_d * sin_e, sin_d * sin_e, 0, -sin_e, cos_d * cos_e, sin_d * cos_e, 0, 0, -sin_d, cos_d, 0, 0, 0, 0, 1);
    mat4 inv_rot = mat4(cos_e, -sin_e, 0, 0, cos_d * sin_e, cos_d * cos_e, -sin_d, 0, sin_d * sin_e, sin_d * cos_e, cos_d, 0, 0, 0, 0, 1);
    r.m_direction = vec3(rot * vec4(r.m_direction, 0));

    float y1 = (r.m_direction[1] * r.m_direction[1] + r.m_direction[2] * r.m_direction[2] - ((r.m_direction[2] - a1) * (r.m_direction[2] - a1)));
    if (y1 > 0) {
        y1 = sqrt(y1);
        r.m_direction[1] = y1;
        r.m_direction[2] -= a1;
        r.m_direction = vec3(inv_rot * vec4(r.m_direction, 0));
    } else {
        recordFinalEvent(r, ETYPE_BEYOND_HORIZON);
    }
    return r;
}

/** variable line spacing for gratings
@params
    lineDensity: general line density?
    z: z-coordinate of ray position
    vls[6]: 6 vls parameters given by user
@returns line density specifically for this z-coordinate
*/
float RAYX_API vlsGrating(float lineDensity, float z, float vls[6]) {
    // lineDensity = lineDensity * (1 + 2*b2*z + 3*b3*z**2 + 4*b4*z**3 +
    // 5*b5*z**4 + 6*b6*z**5 + 7*b7*z**6)
    float z2 = z * z;
    float z3 = z2 * z;
    float z4 = z3 * z;
    float z5 = z4 * z;
    float z6 = z5 * z;
    float a = lineDensity * (1 + 2 * vls[0] * z + 3 * vls[1] * z2 + 4 * vls[2] * z3 + 5 * vls[3] * z4 + 6 * vls[4] * z5 + 7 * vls[5] * z6);
    return a;
}

/*
 * simplified refraction function used for plane gratings
 * normal is always the same (0,1,0) -> no rotation and thus no trigonometric
 * functions necessary
 * @param r			ray
 * @param normal		normal at ray-object intersection (for planes always
 * (0,1,0))
 * @param a			a = WL * D0 * ORD * 1.e-6  with D0: line density (l/mm);
 * WL:wavelength (nm); ORD order of diffraction
 */
Ray RAYX_API refrac_plane(Ray r, ALLOW_UNUSED vec4 normal,
                          float a) {  // TODO fix unused var
    float y1 = r.m_direction[1] * r.m_direction[1] + r.m_direction[2] * r.m_direction[2] - (r.m_direction[2] - a) * (r.m_direction[2] - a);
    if (y1 > 0) {
        y1 = sqrt(y1);
        r.m_direction[1] = y1;
        r.m_direction[2] = r.m_direction[2] - a;
    } else {
        recordFinalEvent(r, ETYPE_BEYOND_HORIZON);
    }
    return r;
}

/**returns first bessel function of parameter v*/
float RAYX_API bessel1(float v) {
    if (v < 0.0 || v > 20.0) {
        return 0.0;
    }

    float sum = 0;
    int large = 30;

    float PO1;
    float PO2;
    float FA1;
    for (int small = 0; small <= large; small++) {
        PO1 = pow(float(-1.0), float(small));
        PO2 = pow(float(v / 2.0), float(2 * small + 1));
        FA1 = fact(small);
        sum += (PO1 / (FA1 * FA1 * (small + 1))) * PO2;
    }
    return sum;
}

/**
calculates the Bessel diffraction effects on circular slits and on circular
zoneplates
@params:	radius		radius < 0 (mm)
            wl			wavelength (nm)
            dphi, dpsi  angles of diffracted ray
@returns
    results stored in dphi, dpsi (inout)
*/
void bessel_diff(float radius, float wl, RAYX_INOUT(float) dphi, RAYX_INOUT(float) dpsi, RAYX_INOUT(uint64_t) ctr) {
    float b = abs(radius) * 1e06;
    float ximax = 5.0 * wl / b;

    float rn1[3];
    float c = -1;
    while (c < 0) {  // while c = wd - rn1[2] < 0 continue
        for (int i = 0; i < 3; i++) {
            rn1[i] = squaresDoubleRNG(ctr);
        }

        dphi = rn1[0] * ximax;
        dpsi = rn1[1] * ximax;
        float xi = sqrt(0.5 * (dphi * dphi + dpsi * dpsi));
        float u = 2.0 * PI * b * xi / wl;
        float wd = 1;
        if (u != 0) {
            wd = 2.0 * bessel1(u) / u;
            wd = wd * wd;
        }
        c = wd - rn1[2];
    }

    // 50% neg/pos sign
    dphi = sign(squaresDoubleRNG(ctr) - 0.5) * dphi;
    dpsi = sign(squaresDoubleRNG(ctr) - 0.5) * dpsi;
}

/**
 * calculates fraunhofer diffraction effects on rectangular slits
 * @param dim		dimension (x or y) (mm)
 * @param wl			wavelength (nm)
 * @param dAngle 	diffraction angle (inout)
 * @param ctr		counter for random number generator
 * @return result stored in dAngle
 */
void fraun_diff(float dim, float wl, RAYX_INOUT(float) dAngle, RAYX_INOUT(uint64_t) ctr) {
    if (dim == 0) return;       // no diffraction in this direction
    float b = dim * 1e06;       // slit opening
    float div = 10.0 * wl / b;  // up to 2nd maximum

    float rna[2];  // 2 uniform random numbers in [0,1]
    float c = -1;
    while (c < 0) {  // while c = wd - uni[1] < 0 continue
        for (int i = 0; i < 2; i++) {
            rna[i] = squaresDoubleRNG(ctr);
        }
        dAngle = (rna[0] - 0.5) * div;
        float u = PI * b * sin(float(dAngle)) / wl;
        float wd = 1;
        if (u != 0) {
            wd = sin(float(u)) / u;
            wd = wd * wd;
        }
        c = wd - rna[1];
    }
}
